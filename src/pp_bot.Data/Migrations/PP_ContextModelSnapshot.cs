// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using pp_bot.Data;

#nullable disable

namespace pp_bot.Server.Migrations
{
    [DbContext(typeof(PPContext))]
    partial class PP_ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("pp_bot.Data.Models.Achievement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("achievements");
                });

            modelBuilder.Entity("pp_bot.Data.Models.BotUser", b =>
                {
                    b.Property<long>("TelegramId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TelegramId"));

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("display_name");

                    b.Property<string>("Username")
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("TelegramId");

                    b.ToTable("bot_users");
                });

            modelBuilder.Entity("pp_bot.Data.Models.Chat", b =>
                {
                    b.Property<long>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ChatId"));

                    b.HasKey("ChatId");

                    b.ToTable("chats");
                });

            modelBuilder.Entity("pp_bot.Data.Models.GrowHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    b.Property<int>("PPLengthChange")
                        .HasColumnType("integer")
                        .HasColumnName("pp_length_change");

                    b.Property<DateTime>("UtcCreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("utc_created_at");

                    b.HasKey("Id");

                    b.ToTable("grow_history");
                });

            modelBuilder.Entity("pp_bot.Data.Models.Ref__BotUser__Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("chat_id");

                    b.Property<int>("PPLength")
                        .HasColumnType("integer")
                        .HasColumnName("pp_length");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("UtcUpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("utc_updated_at");

                    b.HasKey("Id");

                    b.HasAlternateKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("bot_user__chat");
                });

            modelBuilder.Entity("pp_bot.Data.Models.Ref__BotUserToChat__Achievement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AchievementId")
                        .HasColumnType("integer")
                        .HasColumnName("achievement__id");

                    b.Property<long>("ChatUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("bot_user_to_chat__id");

                    b.HasKey("Id");

                    b.HasAlternateKey("AchievementId", "ChatUserId");

                    b.HasIndex("ChatUserId");

                    b.ToTable("bot_user_to_chat__achievement");
                });

            modelBuilder.Entity("pp_bot.Data.Models.GrowHistory", b =>
                {
                    b.HasOne("pp_bot.Data.Models.Ref__BotUser__Chat", "User")
                        .WithMany("GrowHistory")
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("pp_bot.Data.Models.Ref__BotUser__Chat", b =>
                {
                    b.HasOne("pp_bot.Data.Models.Chat", "Chat")
                        .WithMany("ChatUsers")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pp_bot.Data.Models.BotUser", "User")
                        .WithMany("UserChats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("pp_bot.Data.Models.Ref__BotUserToChat__Achievement", b =>
                {
                    b.HasOne("pp_bot.Data.Models.Achievement", "Achievement")
                        .WithMany("UsersAcquired")
                        .HasForeignKey("AchievementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("pp_bot.Data.Models.Ref__BotUser__Chat", "ChatUser")
                        .WithMany("AcquiredAchievements")
                        .HasForeignKey("ChatUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Achievement");

                    b.Navigation("ChatUser");
                });

            modelBuilder.Entity("pp_bot.Data.Models.Achievement", b =>
                {
                    b.Navigation("UsersAcquired");
                });

            modelBuilder.Entity("pp_bot.Data.Models.BotUser", b =>
                {
                    b.Navigation("UserChats");
                });

            modelBuilder.Entity("pp_bot.Data.Models.Chat", b =>
                {
                    b.Navigation("ChatUsers");
                });

            modelBuilder.Entity("pp_bot.Data.Models.Ref__BotUser__Chat", b =>
                {
                    b.Navigation("AcquiredAchievements");

                    b.Navigation("GrowHistory");
                });
#pragma warning restore 612, 618
        }
    }
}
